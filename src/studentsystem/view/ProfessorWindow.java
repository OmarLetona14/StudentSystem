/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package studentsystem.view;

import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import studentsystem.model.CurrentGradeTableModel;
import static studentsystem.model.CurrentGradeTableModel.currentGradeList;
import studentsystem.model.Grade;
import studentsystem.model.GradeTableModel;
import studentsystem.model.Semester;
import studentsystem.model.Student;

/**
 *
 * @author Omar
 */
public class ProfessorWindow extends javax.swing.JFrame {
    
    public static Grade currentGrade = null;
    Grade grade = null;
    CurrentGradeTableModel model = new CurrentGradeTableModel();
    public static Semester currSemester =null;
    public static Student student = null;
    boolean notSelected = true;
    int selected;
    
    /**
     * Creates new form ProfessorWindow
     */
    public ProfessorWindow() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        currentGradeTable.setModel(model);
        currentGradeTable.addMouseListener(new MouseListener(){
            @Override
            public void mouseClicked(MouseEvent e) {
                updateNoteBtn.setEnabled(true);
                
                notSelected = false;
                int fila = currentGradeTable.rowAtPoint(e.getPoint());
                selected = fila;
                
                try {
                    student = currentGrade.getProfessor().getSemester().getListaCursos(
                            currSemester).getClassByGrade(currentGrade.getNoGrade()).getAssignedAt(fila+1).getStudent();
                } catch (Exception ex) {
                    Logger.getLogger(ProfessorWindow.class.getName()).log(Level.SEVERE, null, ex);
                }                
            }

            @Override
            public void mousePressed(MouseEvent e) {
               
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                
            }

            @Override
            public void mouseExited(MouseEvent e) {
                
            }
        });
        
        try {
            
            for(int i=1; i<LoginWindow.currentProfessor.getSemester().getListaCursos(currSemester).listSize();i++){
                try {
                    grade = LoginWindow.currentProfessor.getSemester().getListaCursos(currSemester).getGradeAt(i);
                } catch (Exception ex) {
                    Logger.getLogger(GradeAdministrationWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                if(grade!=null){
                    cbGrade.addItem(grade.getName());
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(ProfessorWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
         for(int i=0; i<LoginWindow.currentProfessor.getSemester().listSize();i++){
            Semester currentSemester = null;
            try {
                currentSemester = LoginWindow.currentProfessor.getSemester().getProfessorSemesterAt(i).getSemester();
            } catch (Exception ex) {
                Logger.getLogger(GradeAdministrationWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(currentSemester!=null){
                cbSemester.addItem(currentSemester.getSemesterName());
            }
        }
         cbSemester.addActionListener((ActionEvent e) -> {
             try {
                    currSemester = getSemester();
                } catch (Exception ex) {
                    Logger.getLogger(GradeAdministrationWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                this.dispose();
                ProfessorWindow c = new ProfessorWindow();
                c.setVisible(true);
            });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbSemester = new javax.swing.JComboBox<>();
        closeSessionBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbGrade = new javax.swing.JComboBox<>();
        showListBtn = new javax.swing.JButton();
        updateNoteBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        currentGradeTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cbSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));

        closeSessionBtn.setText("Cerrar Sesi√≥n");
        closeSessionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeSessionBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Semestre");

        jLabel2.setText("Curso");

        cbGrade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { ""}));

        showListBtn.setText("Mostrar Listado");
        showListBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showListBtnActionPerformed(evt);
            }
        });

        updateNoteBtn.setText("Subir nota");
        updateNoteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateNoteBtnActionPerformed(evt);
            }
        });

        currentGradeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(currentGradeTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbGrade, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(cbSemester, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(showListBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(320, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(closeSessionBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                            .addComponent(updateNoteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(43, 43, 43))))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeSessionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(showListBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateNoteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(71, 71, 71)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeSessionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeSessionBtnActionPerformed
        this.dispose();
        LoginWindow login = new LoginWindow();
        login.setVisible(true);
    }//GEN-LAST:event_closeSessionBtnActionPerformed

    private void showListBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showListBtnActionPerformed
        try {
            currentGrade = getGrade(idRef());
        } catch (Exception ex) {
            Logger.getLogger(ProfessorWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(!LoginWindow.currentProfessor.getSemester().getListaCursos(currSemester).emptyClass(currentGrade.getNoGrade())){
            try {
            
            this.dispose();
            ProfessorWindow p = new ProfessorWindow();
            p.setVisible(true);
            } catch (Exception ex) {
                Logger.getLogger(ProfessorWindow.class.getName()).log(Level.SEVERE, null, ex);
                
            }
        }else{
        JOptionPane.showMessageDialog(this, "Esta clase se encuentra actualmente vac√≠a", "Error",
                        JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_showListBtnActionPerformed

    private void updateNoteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateNoteBtnActionPerformed
        this.dispose();
        NoteWindow not = new NoteWindow();
        not.setVisible(true);
    }//GEN-LAST:event_updateNoteBtnActionPerformed
    
   public Semester getSemester() throws Exception{
        return LoginWindow.listaSemestres.getSemesterByName((String)cbSemester.getSelectedItem());
    }
    public Grade getGrade(int idRef) throws Exception{
        return GradeTableModel.gradesList.getGradeAt(idRef);
    }
    public int idRef(){
        if(!cbGrade.getSelectedItem().equals("")){       
            Grade currentG = LoginWindow.currentProfessor.getSemester().getListaCursos(currSemester).getGradeByName(String.valueOf(cbGrade.getSelectedItem()));
            return currentG.getIdGrade();
        }else{
            return 0;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProfessorWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProfessorWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProfessorWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProfessorWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProfessorWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbGrade;
    private javax.swing.JComboBox<String> cbSemester;
    private javax.swing.JButton closeSessionBtn;
    private javax.swing.JTable currentGradeTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton showListBtn;
    private javax.swing.JButton updateNoteBtn;
    // End of variables declaration//GEN-END:variables
}
